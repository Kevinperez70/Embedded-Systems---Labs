#include "mcc_generated_files/mcc.h"
#pragma warning disable 520
#pragma warning disable 1498
#define N 32 // Number of notes
#define C 0.478*1000
#define D 0.426*1000
#define E 0.38*1000
#define F 0.358*1000
#define G 0.319*1000
#define A 0.285*1000
#define B 0.253*1000

#define C_T 7648
#define D_T 6816
#define E_T 6080
#define F_T 5728
#define G_T 5104
#define A_T 4560
#define B_T 4048

void microSecondDelay(uint16_t us);
void milliSecondDelay(uint16_t ms);
//*****************************************************************
//*****************************************************************
void main(void) {
uint16_t halfPeriodDelay[N] = {G, E, G, G, E, G, A, G, F, E, D, E, F, E, F, G, C, C, C, C, C, D, E, F, G, G, D, D, F, E, D, E, C}; // microseconds
uint16_t halfPeriodTimer[N] = {G_T, E_T, G_T, G_T, E_T, G_T, A_T, G_T, F_T, E_T, D_T, E_T, F_T, E_T, F_T, G_T, C_T, C_T, C_T, C_T, C_T, D_T, E_T, F_T, G_T, G_T, D_T, D_T, F_T, E_T, D_T, E_T, C_T}; // 1:1 timer counts
uint8_t i = 0;
SYSTEM_Initialize();
for (;;) {
if (TOP_BUTTON_GetValue() == 0) {
while (TOP_BUTTON_GetValue() == 0) {
microSecondDelay(halfPeriodDelay[i]);
SPEAKER_PIN_Toggle();
} // end pressed button
i = i + 1;
if (i == N) i = 0;
} // end pressed button
if (BOTTOM_BUTTON_GetValue() == 0) {
while (BOTTOM_BUTTON_GetValue() == 0) {
TMR1_WriteTimer(0x10000 - halfPeriodTimer[i]);
PIR1bits.TMR1IF = 0;
while (TMR1_HasOverflowOccured() == false);
SPEAKER_PIN_Toggle();
} // end pressed button
i = i + 1;
if (i == N) i = 0;
} // end pressed button
} // end infinite loop
} // end main
//*****************************************************************
// Call microseconds(1000) a number of times
//*****************************************************************
void milliSecondDelay(uint16_t ms) {
uint16_t i;
for (i = 0; i < ms; i++) microSecondDelay(1000);
} // end millSecond
//*****************************************************************
// Create a delay of 1uS and loop a number of times
//*****************************************************************
void microSecondDelay(uint16_t us) {
uint16_t i;
for (i = 0; i < us; i++) {
asm("NOP"); // 1
asm("NOP"); // 2
asm("NOP"); // 3
asm("NOP"); // 4
asm("NOP"); // 5

i = i;
} // end for
} // end microSecond()
