#include "mcc_generated_files/mcc.h"
#pragma warning disable 373
#pragma warning disable 520
#pragma warning disable 751
#pragma warning disable 1498

#define LED_ON      25 
#define LED_OFF     0
#define MAX_BUFFER_SIZE    32

char IRTransmitBuffer[MAX_BUFFER_SIZE];
uint8_t transmitStart = false;
uint8_t transmitBusy = false;

void myEUSART2ISR(void);
void transmitCharacterOverIR(char letter, uint16_t Baudrate);
char IRReceiveBuffer[MAX_BUFFER_SIZE];
uint8_t receiveBusy = false;
uint8_t receiveNewMessage = false;
     

//----------------------------------------------
// Main "function"
//----------------------------------------------

void main(void) {

    uint8_t i, checksum;
    uint8_t baudRateSelected = 1;
    char cmd;
    uint16_t bitPeriod[6] = {53333, 13333, 6666, 3333, 1666, 833};

    SYSTEM_Initialize();
    EPWM2_LoadDutyValue(LED_OFF);
    PIE3bits.RC2IE = 0;
    EUSART2_SetRxInterruptHandler(myEUSART2ISR);
    PIE3bits.RC2IE = 1;
    
    if (EUSART2_DataReady) (void) EUSART2_Read();
    if (EUSART2_DataReady) (void) EUSART2_Read();
    
    INTERRUPT_GlobalInterruptEnable();
    INTERRUPT_PeripheralInterruptEnable();

    // Delay so the Baud rate generator is stable and prints the splash screen correctly
    TMR1_WriteTimer(0);
    PIR1bits.TMR1IF = 0;
    while (TMR1_HasOverflowOccured() == false);

    printf("inLab 6\r\n");
    printf("Receive and decode an IR packet\r\n");
    printf("Dev'21 Board wiring\r\n");
    printf("Install a jumper wire from RC0 to RB7 ONLY AFTER unplugging PICKit3\r\n");
    printf("Install a jumper over IR_TX header pins\r\n");
    printf("\r\n> "); // print a nice command prompt


    for (;;) {

        if (EUSART1_DataReady) { // wait for incoming data on USART
            cmd = EUSART1_Read();
            switch (cmd) { // and do what it tells you to do

                    //--------------------------------------------
                    // Reply with help menu
                    //--------------------------------------------
                case '?':
                    printf("-------------------------------------------------\r\n");
                    switch (baudRateSelected) {
                        case 0: printf("300 Baud\r\n");
                            break;
                        case 1: printf("1200 Baud\r\n");
                            break;
                        case 2: printf("2400 Baud\r\n");
                            break;
                        case 3: printf("4800 Baud\r\n");
                            break;                                           
                        case 4: printf("9600 Baud\r\n");
                            break;
                        case 5: printf("19200 Baud\r\n");
                            break;
                        default: printf("1200 Baud\r\n");
                            break;
                    }
                    
                    if (receiveNewMessage == true)
                        printf("receiveNewMessage = true\r\n");
                    else
                        printf("receiveNewMessage = false\r\n");
                    printf("-------------------------------------------------\r\n");
                    printf("?: help menu\r\n");
                    printf("o: k\r\n");
                    printf("Z: Reset processor\r\n");
                    printf("z: Clear the terminal\r\n");
                    
                    printf("b: set the Baud rate of the sent characters\r\n");
                    printf("r: reset EUSART2\r\n");
                    
                    printf("m: Enter in transmit Message\r\n");
                    
                    printf("S: Send message in foreground\r\n");
                    printf("R: Receive message using EUSART ISR viaIR decoder\r\n");
                    
                    printf("-------------------------------------------------\r\n");
                    break;

                    //--------------------------------------------
                    // Reply with "ok", used for PC to PIC test
                    //--------------------------------------------
                case 'o':
                    printf("o:	ok\r\n");
                    break;

                    //--------------------------------------------
                    // Reset the processor after clearing the terminal
                    //--------------------------------------------                      
                case 'Z':
                    for (i = 0; i < 40; i++) printf("\n");
                    RESET();
                    break;

                    //--------------------------------------------
                    // Clear the terminal
                    //--------------------------------------------                      
                case 'z':
                    for (i = 0; i < 40; i++) printf("\n");
                    break;

                    //--------------------------------------------
                    // Set the Baud rate - use MCC EUSART2 configuration register tab            
                    //--------------------------------------------                    
                case 'b':
                    printf("Choose the index of the target baud rate\r\n");
                    printf("0: 300 baud\r\n");
                    printf("1: 1200 baud\r\n");
                    printf("2: 2400 baud\r\n");
                    printf("3: 4800 baud\r\n");                    
                    printf("4: 9600 baud\r\n");
                    printf("5: 19200 baud\r\n");
                    while (EUSART1_DataReady);
                    baudRateSelected = EUSART1_Read() - '0';
                    switch (baudRateSelected) {
                        case 0: SPBRGH2 = 0xD0;
                            SPBRG2 = 0x54;
                            break;
                        case 1: SPBRGH2 = 0x34;
                            SPBRG2 = 0x14;
                            break;
                        case 2: SPBRGH2 = 0x1A;
                            SPBRG2 = 0x0A;
                            break;
                        case 3: SPBRGH2 = 0x0D;
                            SPBRG2 = 0x05;
                            break;                            
                        case 4: SPBRGH2 = 0x06;
                            SPBRG2 = 0x82;
                            break;
                        case 5: SPBRGH2 = 0x03;
                            SPBRG2 = 0x40;
                            break;
                        default: SPBRGH2 = 0x34;
                            SPBRG2 = 0x14;
                            break;
                    }
                    printf("Baud rate assigned %02x:%02x\r\n", SPBRGH2, SPBRG2);
                    break;

                    //--------------------------------------------
                    // Turn on the IR LED for bitPeriod[baudRateSelected] TMR1 cnts
                    // This function is inside the for-loop of the 'S' function
                    //--------------------------------------------  
                case 'r':
                    RCSTA2bits.CREN = 0;
                    RCSTA2bits.CREN = 1;
                    printf("Just reset EUSART2\r\n");
                    break;

                case 'm':
                    printf("Enter message, hit return when done.\r\n");
                    printf("> ");
                    i = 0;
                    checksum = 0;

                    while (EUSART1_DataReady);

                    while ((i < MAX_BUFFER_SIZE - 1) && ((cmd = EUSART1_Read()) != '\r')){
                   
                            IRTransmitBuffer[i++] = cmd;
                            checksum += cmd;
                            printf("%c", cmd); 
                    }

                IRTransmitBuffer[i] = '\0';
                IRTransmitBuffer[i + 1] = checksum;
                printf("\r\nCreated\r\n");
                printf("    Message: %s\r\n", IRTransmitBuffer);
                printf("    Checksum: %d\r\n", checksum);
                break;

                case 'S': // Press 'S', the string leaves the IRTransmitBuffer and goes to the RC0 pin as PWM waves.
                    if (transmitBusy == false) { // Ensure no transmission is already in progress
                        printf("Starting transmission...\r\n");
                        i = 0;
                        checksum = 0;

                        transmitBusy = true;

                        while (IRTransmitBuffer[i] != '\0' && i < MAX_BUFFER_SIZE - 1) {
                            printf("Transmitting character: %c\r\n", IRTransmitBuffer[i]);
                            transmitCharacterOverIR(IRTransmitBuffer[i], bitPeriod[baudRateSelected]);
                            checksum += IRTransmitBuffer[i];
                            i++;
                        }

                        if (i == MAX_BUFFER_SIZE - 1) {
                            printf("Error: Message too long.\r\n");
                            transmitBusy = false;
                            break;
                        }

                        printf("Transmitting NULL terminator.\r\n");
                        transmitCharacterOverIR('\0', bitPeriod[baudRateSelected]);
                        transmitCharacterOverIR(checksum, bitPeriod[baudRateSelected]);

                        transmitBusy = false;
                        receiveNewMessage = true;

                        printf("Message transmitted successfully with checksum: %d\r\n", checksum);
                    } else {
                        printf("Transmission in progress, please wait.\r\n");
                    }
                    break;
 
                case 'R': // Pressing R will transfer the data in IRReceiveBuffer to UART1's Tx to display on Putty
                if (receiveNewMessage == true) {
                    i = 0;
                    printf("Received Message: ");
                    while (IRReceiveBuffer[i] != '\0') {  // Loop through buffer until null terminator
                        printf("%c", IRReceiveBuffer[i++]); // Print each character to UART1
                    }
                    printf("\r\nChecksum: %d\r\n", IRReceiveBuffer[i + 1]);
                    receiveNewMessage = false;
                } else {
                    printf("No message, receiveNewMessage = false\r\n");
                }
                break;
                
                default:
                    printf("Unknown key %c\r\n", cmd);
                    break;

            } // end switch            
        } // end if
    } // end while 
} // end main

void transmitCharacterOverIR(char letter, uint16_t Baudrate) {
    
    uint8_t mask;
    EPWM2_LoadDutyValue(LED_ON);
    TMR1_WriteTimer(0x10000 - Baudrate);
    PIR1bits.TMR1IF = 0;
    while (TMR1_HasOverflowOccured() == false);
    
    mask = 0b00000001;
    while (mask != 0) {
        if ((letter & mask) != 0) EPWM2_LoadDutyValue(LED_OFF);
        else EPWM2_LoadDutyValue(LED_ON);
        mask = mask << 1;
        TMR1_WriteTimer(0x10000 - Baudrate);
        PIR1bits.TMR1IF = 0;
        while (TMR1_HasOverflowOccured() == false);
    }
    
    EPWM2_LoadDutyValue(LED_OFF);
    TMR1_WriteTimer(0x10000 - Baudrate);
    PIR1bits.TMR1IF = 0;
    while (TMR1_HasOverflowOccured() == false);
}

//#define RX_IDLE        0
//#define RX_DATA_BYTES  1
//#define RX_CHECKSUM    2

typedef enum {
    RX_IDLE, RX_DATA_BYTES, RX_CHECKSUM
} eusartState_t;

void myEUSART2ISR(void) {
    static eusartState_t eusart2ISRstate = RX_IDLE;
    static uint8_t receiveBufferIndex = 0;
    static uint8_t calculatedChecksum = 0;

    char receivedByte;

    if (!EUSART2_DataReady) {
        return; // Exit if no data available
    }

    receivedByte = EUSART2_Read(); // Read the received byte

    switch (eusart2ISRstate) {
        case RX_IDLE:
            receiveBufferIndex = 0;
            calculatedChecksum = 0;
            receiveBusy = true; // Indicate receiving is in progress
            IRReceiveBuffer[receiveBufferIndex++] = receivedByte; // Store first byte
            calculatedChecksum ^= receivedByte; // Update checksum
            eusart2ISRstate = RX_DATA_BYTES; // Move to data receiving state
            break;

        case RX_DATA_BYTES:
            if (receivedByte == '\0') {
                eusart2ISRstate = RX_CHECKSUM; // Null-terminator indicates end of message
            } else {
                if (receiveBufferIndex < MAX_BUFFER_SIZE - 1) {
                    IRReceiveBuffer[receiveBufferIndex++] = receivedByte; // Store byte
                    calculatedChecksum ^= receivedByte; // Update checksum
                } else {
                    eusart2ISRstate = RX_IDLE; // Buffer full, reset state
                    receiveBusy = false;
                }
            }
            break;

        case RX_CHECKSUM:
            if (receivedByte == calculatedChecksum) {
                IRReceiveBuffer[receiveBufferIndex] = '\0'; // Null-terminate string
                receiveNewMessage = true; // New message available
            } else {
                printf("Checksum error!\r\n"); // Indicate checksum mismatch
            }

            receiveBusy = false; // Reset receive busy flag
            eusart2ISRstate = RX_IDLE; // Reset state
            break;

        default:
            eusart2ISRstate = RX_IDLE; // Reset on unexpected state
            receiveBusy = false;
            break;
    }

    PIR3bits.RC2IF = 0; // Clear EUSART2 interrupt flag
}
